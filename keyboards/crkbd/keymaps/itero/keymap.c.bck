#include QMK_KEYBOARD_H


/* THIS FILE WAS GENERATED!
 *
 * This file was generated by qmk json2c. You may or may not want to
 * edit it directly.
 */


const uint16_t PROGMEM keymaps[][MATRIX_ROWS][MATRIX_COLS] = {
	[0] = LAYOUT_split_3x6_3(MEH_T(KC_ESC), KC_Q, KC_W, KC_F, KC_P, KC_G, KC_J, KC_L, KC_U, KC_Y, KC_SCLN, KC_ENT, LCTL_T(KC_TAB), KC_A, KC_R, KC_S, KC_T, KC_D, KC_H, KC_N, KC_E, KC_I, KC_O, RCTL_T(KC_QUOT), KC_LSFT, KC_Z, KC_X, KC_C, KC_V, KC_B, KC_K, KC_M, KC_COMM, KC_DOT, KC_SLSH, KC_RSFT, KC_LGUI, MO(2), LT(5,KC_NO), KC_SPC, MO(1), KC_LALT),
	[1] = LAYOUT_split_3x6_3(KC_NO, KC_NO, LSA(KC_T), LSA(KC_M), KC_NO, KC_NO, KC_NO, KC_NO, KC_UP, KC_BSPC, KC_DEL, KC_ESC, KC_NO, LCTL(KC_1), LCTL(KC_2), LCTL(KC_3), LCTL(KC_4), LCTL(KC_5), KC_HOME, KC_LEFT, KC_DOWN, KC_RGHT, KC_END, KC_RALT, KC_TRNS, LSA(KC_1), LSA(KC_2), LSA(KC_3), LSA(KC_4), LSA(KC_5), KC_INS, KC_PGUP, KC_PGDN, KC_NO, KC_NO, KC_RSFT, KC_TRNS, MO(3), KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS),
	[2] = LAYOUT_split_3x6_3(KC_ESC, KC_NO, KC_MUTE, LAG(KC_UP), KC_VOLD, KC_VOLU, KC_CIRC, KC_AMPR, KC_ASTR, KC_LPRN, KC_RPRN, KC_BSPC, KC_TRNS, KC_NO, LGUI(KC_LCBR), LAG(KC_DOWN), LGUI(KC_RCBR), KC_NO, KC_MINS, KC_EQL, KC_LBRC, KC_RBRC, KC_BSLS, KC_GRV, KC_TRNS, KC_MPLY, KC_NO, KC_NO, KC_BRID, KC_BRIU, KC_UNDS, KC_PLUS, KC_LCBR, KC_RCBR, KC_PIPE, KC_TILD, KC_TRNS, KC_TRNS, KC_SPC, KC_BSPC, MO(3), KC_RALT),
	[3] = LAYOUT_split_3x6_3(KC_NO, KC_NO, KC_NO, KC_NO, KC_NO, TG(4), KC_WH_D, KC_BTN1, KC_MS_U, KC_BTN2, KC_BTN3, KC_NO, KC_NO, KC_NO, KC_NO, KC_NO, KC_NO, KC_NO, KC_WH_U, KC_MS_L, KC_MS_D, KC_MS_R, KC_NO, KC_NO, KC_NO, KC_NO, KC_NO, KC_NO, KC_NO, KC_NO, KC_NO, KC_NO, KC_NO, KC_NO, KC_NO, KC_NO, KC_LGUI, KC_TRNS, KC_SPC, KC_LCTL, KC_TRNS, KC_RALT),
	[4] = LAYOUT_split_3x6_3(KC_TAB, KC_Q, KC_W, KC_E, KC_R, KC_T, KC_Y, KC_U, KC_I, KC_O, KC_P, KC_TRNS, KC_CAPS, KC_A, KC_S, KC_D, KC_F, KC_G, KC_H, KC_J, KC_K, KC_L, KC_SCLN, KC_QUOT, KC_LSFT, KC_Z, KC_X, KC_C, KC_V, KC_B, KC_N, KC_M, KC_COMM, KC_DOT, KC_SLSH, KC_RSFT, KC_LCTL, KC_LGUI, KC_ENT, KC_SPC, KC_TRNS, TO(0)),
	[5] = LAYOUT_split_3x6_3(TO(0), KC_EXLM, KC_AT, KC_HASH, KC_DLR, KC_PERC, KC_CIRC, KC_7, KC_8, KC_9, KC_PPLS, KC_TRNS, KC_NO, KC_NO, KC_NO, KC_NO, TO(5), KC_NO, KC_NO, KC_4, KC_5, KC_6, KC_PMNS, KC_PAST, KC_TRNS, KC_NO, KC_NO, KC_NO, KC_NO, KC_NO, KC_NO, KC_1, KC_2, KC_3, KC_PEQL, KC_PSLS, KC_NO, MO(6), KC_TRNS, KC_SPC, KC_P0, KC_PDOT),
	[6] = LAYOUT_split_3x6_3(QK_BOOT, RGB_TOG, RGB_MODE_BREATHE, KC_NO, KC_NO, KC_NO, KC_NO, KC_NO, KC_NO, KC_NO, KC_NO, KC_TRNS, EE_CLR, KC_NO, KC_NO, KC_NO, KC_NO, KC_NO, KC_NO, KC_NO, KC_NO, KC_NO, KC_NO, KC_NO, DB_TOGG, KC_NO, KC_NO, KC_NO, KC_NO, KC_NO, KC_NO, KC_NO, KC_NO, KC_NO, KC_NO, KC_NO, KC_NO, KC_TRNS, KC_NO, KC_BSPC, KC_NO, KC_NO)
};

#if defined(ENCODER_ENABLE) && defined(ENCODER_MAP_ENABLE)
const uint16_t PROGMEM encoder_map[][NUM_ENCODERS][NUM_DIRECTIONS] = {

};
#endif // defined(ENCODER_ENABLE) && defined(ENCODER_MAP_ENABLE)


/* const rgblight_segment_t PROGMEM on_layer[] = RGBLIGHT_LAYER_SEGMENTS({0, 2, HSV_GREEN}); */
/**/
/* const rgblight_segment_t PROGMEM off_layer[] = RGBLIGHT_LAYER_SEGMENTS({0, 2, HSV_RED}); */
/**/
/* const rgblight_segment_t PROGMEM caps_layer[] = RGBLIGHT_LAYER_SEGMENTS({0, 2, HSV_PURPLE}); */
/**/
/* const rgblight_segment_t* const PROGMEM my_rgb_layers[] = RGBLIGHT_LAYERS_LIST( */
/*     on_layer, */
/*     off_layer, */
/*     caps_layer */
/* ); */
const uint8_t RGBLED_BREATHING_INTERVALS[] PROGMEM = {15};

void keyboard_post_init_user(void) {
    // Initialize RGB to static black
    /* rgblight_layers = my_rgb_layers; */
    //.rgblight_enable_noeeprom();
    rgblight_sethsv(24,255,255);
    rgblight_mode(RGBLIGHT_MODE_BREATHING);


}

void caps_word_set_user(bool active) {
    dprintf("caps: %i\n", active);
if(active){
            rgblight_sethsv(HSV_PURPLE);
    } else {


        rgblight_sethsv(24,255,255);

    }
    /* rgblight_set_layer_state(2, active); */
}

layer_state_t layer_state_set_user(layer_state_t state) {
    if(layer_state_cmp(state,4)) {

            rgblight_sethsv(HSV_CORAL);
    } else {

            rgblight_sethsv(24,255,255);
    }
    return state;
}


